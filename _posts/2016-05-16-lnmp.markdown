---
layout: post
title:  "LNMP服务器配置"
date:   2016-05-16 00:00:00
categories: architect
author: "Chyler"
---

本文LNMP服务器配置基于Ubuntu 14.04，通常LNMP按照Nginx -> MySQL -> PHP的顺序安装配置。

**Part1. Nginx安装**

***安装法一***

**1. nginx依赖安装**

- gzip模块 zlib库 
下载地址：http://www.zlib.net/  文件：zlib-1.2.8.tar.gz

```
$tar -xzvf zlib-1.2.8.tar.gz
$cd zlib-1.2.8
$./configure
$make 
$sudo make install
```

- rewrire模块 pcre库
下载地址: http://www.pcre.org/ 文件：pcre-8.38.tar.gz（推荐，10.10版本make不通过）

```
$tar -xzvf pcre-8.38.tar.gz
$cd pcre-8.38
$./configure
$make
$sudo make install
```

- ssl模块 openssl库
下载地址: http://distfiles.macports.org/openssl/ 文件：openssl-1.0.1g.tar.gz（不推荐1.0.1c版本，各种问题）

```
$tar -xzvf openssl-1.0.1g.tar.gz
$cd openssl-1.0.1g
$./config
$make
$sudo make install
```
**error：** 
POD document had syntax errors at /usr/bin/pod2man line 69. make

**tips：** 
```
rm /usr/bin/pod2man
```

**2. nginx安装**

```
$tar -zxvf nginx-1.8.0.tar.gz
$cd nginx.1.8.0
$groupadd -r nginx
$useradd -r -g nginx -s /bin/false -M nginx
$sudo ./configure --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-http_ssl_module --with-pcre=../pcre-8.38 --with-zlib=../zlib-1.2.8 --with-openssl=../openssl-1.0.1g --with-http_stub_status_module --user=nginx --group=nginx
$sudo make
$sudo make install

```
**tips：**
./configure参数中 --with-pcre=指向解压的源码目录

**error:**

```
make[2]: Entering directory \`/usr/local/src/pcre2-10.10\`
make[2]: \*** No rule to make target \`libpcre.la\`.  Stop.
make[2]: Leaving directory \`/usr/local/src/pcre2-10.10\`
make[1]: \*** [../pcre2-10.10/.libs/libpcre.a] Error 2
make[1]: Leaving directory `/usr/local/src/nginx-1.8.0'
make: \*** [build] Error 2
```

**tips:**
pcre2-10.10的问题，换个版本就解决了。具体为什么出问题我也不知道。

**3. 安装成功**

自动创建/usr/local/nginx

![/usr/local/nginx目录](http://img.blog.csdn.net/20151230200733541)

**4. 手动启动**

```
//不指定配置文件
sudo /usr/local/nginx/nginx
//指定配置文件
/usr/local/nginx/nginx -c /usr/local/nginx/nginx.conf
```

![启动成功](http://img.blog.csdn.net/20151230201541049)

**5. 停止服务**
```
$sudo kill `cat /usr/local/nginx/nginx.pid`
```

**安装法二**

```
$sudo apt-get install nginx
```

- 配置文件 /etc/nginx/nginx.conf  
- 程序文件目录 /usr/sbin/nginx  
- 错误日志 /var/log/nginx/error.log 
- 启动脚本 /etc/init.d/nginx 

**安装法三【官网】**

```
$sudo -s
#nginx=stable
#add-apt-repository ppa:nginx/$nginx
#apt-get update
#apt-get install nginx
```

*安装成功后 nginx已启动*
![启动nginx成功](http://img.blog.csdn.net/20151230143338582)


手动开启服务

 方式一
```
$/etc/init.d/nginx start
```
开启失败时，检查/etc/init.d/nginx启动脚本
原脚本：

```
#! /bin/sh

### BEGIN INIT INFO
# Provides:          nginx
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the nginx web server
# Description:       starts nginx using start-stop-daemon
### END INIT INFO

PATH=/opt/nginx/sbin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/opt/nginx/sbin/nginx
NAME=nginx
DESC=nginx

test -x $DAEMON || exit 0

# Include nginx defaults if available
if [ -f /etc/default/nginx ] ; then
        . /etc/default/nginx
fi

set -e

case "$1" in
  start)
        echo -n "Starting $DESC: "
        start-stop-daemon --start --quiet --pidfile /opt/nginx/logs/$NAME.pid \
                --exec $DAEMON -- $DAEMON_OPTS
        echo "$NAME."
        ;;
  stop)
        echo -n "Stopping $DESC: "
        start-stop-daemon --stop --quiet --pidfile /opt/nginx/logs/$NAME.pid \
                --exec $DAEMON
        echo "$NAME."
        ;;
  restart|force-reload)
        echo -n "Restarting $DESC: "
        start-stop-daemon --stop --quiet --pidfile \
                /opt/nginx/logs/$NAME.pid --exec $DAEMON
        sleep 1
        start-stop-daemon --start --quiet --pidfile \
                /opt/nginx/logs/$NAME.pid --exec $DAEMON -- $DAEMON_OPTS
        echo "$NAME."
        ;;
  reload)
          echo -n "Reloading $DESC configuration: "
          start-stop-daemon --stop --signal HUP --quiet --pidfile     /opt/nginx/logs/$NAME.pid \
              --exec $DAEMON
          echo "$NAME."
          ;;
      *)
            N=/etc/init.d/$NAME
            echo "Usage: $N {start|stop|restart|reload|force-reload}" >&2
            exit 1
            ;;
    esac

    exit 0

```

方式二

```
/usr/sbin/nginx -c /etc/nginx/nginx.conf
```

*成功开启*

查看nginx进程`ps aux|grep nginx`

![查看nginx进程](http://img.blog.csdn.net/20151230114257447)

访问http://localhost:80/index.html查看欢迎界面

停止服务`/etc/init.d/nginx -s stop`

*也可以直接kill掉nginx主进程*

重启服务`/etc/init.d/nginx -s reload`



**Part2. MySQL安装**

下载地址：
http://dev.mysql.com/downloads/mysql/
select platform: Source Code
Generic Linux (Architecture Independent), Compressed TAR Archive
<a href="http://dev.mysql.com/downloads/file/?id=460600">(mysql-5.6.28.tar.gz)</a>

**安装mysql**

```
$sudo tar -zxvf mysql-5.6.28.tar.gz
$cd mysql-5.6.28.tar.gz
$sudo cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS:STRING=utf8,gbk -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1 -DMYSQL_DATADIR=/var/mysql/data
$sudo make
$sudo make install
```

**配置mysql**

```
//进入mysql的安装目录 /usr/local/mysql
//创建用户组和用户
$sudo groupadd mysql
$sudo useradd -g mysql mysql
//创建pid文件
//$sudo touch mysql.pid
//设置mysql安装目录权限
$sudo chown -R mysal:mysql ./  // “./”为mysql的安装路径
//复制配置文件
$sudo cp support-files/my-default.cnf /etc/my.cnf
$sudo chown mysql:mysql /etc/my.cnf
//修改配置文件
$sudo vi /etc/my.cnf
```

>[client]
port = 3306
socket = /usr/local/mysql/data/mysql.sock
[mysqld]
port = 3306
socket = /usr/local/mysql/data/mysql.sock
basedir = /usr/local/mysql
datadir  = /usr/local/mysql/data
pid-file = /usr/local/mysql/mysql.pid

```
//初始化mysql
$sudo scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data/
```

**启动mysql**

```
//法一 直接启动
$sudo bin/mysqld_safe &
//法二 
$cd /usr/local/mysql/
$cp support-files/mysql.server /etc/init.d/mysql

```

**error：**

```
. * The server quit without updating PID file (/usr/local/mysql/mysql.pid).
```
查看错误日志

```
160106 14:58:36 mysqld_safe Starting mysqld daemon with databases from /usr/local/mysql/data
2016-01-06 14:58:36 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2016-01-06 14:58:36 0 [Note] /usr/local/mysql/bin/mysqld (mysqld 5.6.28) starting as process 25960 ...
2016-01-06 14:58:36 25960 [Note] Plugin 'FEDERATED' is disabled.
/usr/local/mysql/bin/mysqld: Can't find file: './mysql/plugin.frm' (errno: 13 - Permission denied)
2016-01-06 14:58:36 25960 [ERROR] Can't open the mysql.plugin table. Please run mysql_upgrade to create it.
2016-01-06 14:58:36 25960 [Note] InnoDB: Using atomics to ref count buffer pool pages
2016-01-06 14:58:36 25960 [Note] InnoDB: The InnoDB memory heap is disabled
2016-01-06 14:58:36 25960 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins
2016-01-06 14:58:36 25960 [Note] InnoDB: Memory barrier is not used
2016-01-06 14:58:36 25960 [Note] InnoDB: Compressed tables use zlib 1.2.3
2016-01-06 14:58:36 25960 [Note] InnoDB: Using Linux native AIO
2016-01-06 14:58:36 25960 [Note] InnoDB: Using CPU crc32 instructions
2016-01-06 14:58:36 25960 [Note] InnoDB: Initializing buffer pool, size = 128.0M
2016-01-06 14:58:37 25960 [Note] InnoDB: Completed initialization of buffer pool
2016-01-06 14:58:37 25960 [ERROR] InnoDB: ./ibdata1 can't be opened in read-write mode
2016-01-06 14:58:37 25960 [ERROR] InnoDB: The system tablespace must be writable!
2016-01-06 14:58:37 25960 [ERROR] Plugin 'InnoDB' init function returned error.
2016-01-06 14:58:37 25960 [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed.
2016-01-06 14:58:37 25960 [ERROR] Unknown/unsupported storage engine: InnoDB
2016-01-06 14:58:37 25960 [ERROR] Aborting

2016-01-06 14:58:37 25960 [Note] Binlog end
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'partition'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'ARCHIVE'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'PERFORMANCE_SCHEMA'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_DATAFILES'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_TABLESPACES'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_FOREIGN_COLS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_FOREIGN'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_FIELDS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_COLUMNS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_INDEXES'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_TABLESTATS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_TABLES'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_INDEX_TABLE'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_INDEX_CACHE'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_CONFIG'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_BEING_DELETED'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_DELETED'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_DEFAULT_STOPWORD'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_METRICS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_BUFFER_POOL_STATS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_BUFFER_PAGE_LRU'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_BUFFER_PAGE'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMP_PER_INDEX_RESET'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMP_PER_INDEX'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMPMEM_RESET'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMPMEM'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMP_RESET'
```

**tips：重新初始化，修改data目录下所有文件权限为777**

```
To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system

PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
To do so, start the server, then issue the following commands:

  /usr/local/mysql/bin/mysqladmin -u root password 'new-password'
  /usr/local/mysql/bin/mysqladmin -u root -h HY password 'new-password'

Alternatively you can run:

  /usr/local/mysql/bin/mysql_secure_installation

which will also give you the option of removing the test
databases and anonymous user created by default.  This is
strongly recommended for production servers.

See the manual for more instructions.

You can start the MySQL daemon with:

  cd . ; /usr/local/mysql/bin/mysqld_safe &

You can test the MySQL daemon with mysql-test-run.pl

  cd mysql-test ; perl mysql-test-run.pl

Please report any problems at http://bugs.mysql.com/

The latest information about MySQL is available on the web at

  http://www.mysql.com

Support MySQL by buying support/licenses at http://shop.mysql.com

WARNING: Found existing config file /usr/local/mysql/my.cnf on the system.
Because this file might be in use, it was not replaced,
but was used in bootstrap (unless you used --defaults-file)
and when you later start the server.
The new default config file was created as /usr/local/mysql/my-new.cnf,
please compare it with your file and take the changes you need.

WARNING: Default config file /etc/my.cnf exists on the system
This file will be read by default by the MySQL server
If you do not want to use this, either remove it, or use the
--defaults-file argument to mysqld_safe when starting the server

```

**重新启动 成功**
![启动mysql成功](http://img.blog.csdn.net/20160106153706992)

------
未知原因 mysql启动不成功

**重新安装**，需要在安装前彻底清除mysql

```
sudo apt-get --purge remove mysql-server
sudo apt-get --purge remove mysql-client
sudo apt-get --purge remove mysql-common
sudo apt-get autoremove
sudo apt-get autoclean

sudo rm -rf /etc/mysql
sudo rm -rf /var/lib/mysql

#检查
which mysql #empty
whereis mysql #empty
mysql --verson #mysql is not installed
```

重新安装

```
sudo apt-get update
sudo apt-get install mysql-server
sudo apt-get install mysql-client
sudo apt-get install libmysqlclient-dev
```
安装成功

```
ps aux | grep mysql
```
![这里写图片描述](http://img.blog.csdn.net/20160118181350734)

登录

```
#用户名：root 密码：123456
mysql -uroot -p123456
```

**环境不同可能会出现不一样的问题**
有很大程度是因为apt源的问题导致的：
下面是我的源

```
deb http://mirrors.sohu.com/ubuntu/ precise main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-security main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-updates main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-proposed main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-security main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-proposed main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse
```

注意系统更新要勾选

![这里写图片描述](http://img.blog.csdn.net/20160317191654694)
![这里写图片描述](http://img.blog.csdn.net/20160317191706632)

这样可以解决如下问题

```
有一些软件包无法被安装。如果您用的是 unstable 发行版，这也许是
因为系统无法达到您要求的状态造成的。该版本中可能会有一些您需要的软件
包尚未被创建或是它们已被从新到(Incoming)目录移出。
下列信息可能会对解决问题有所帮助：

下列软件包有未满足的依赖关系：
 libc6-i386 : 依赖: libc6 (= 2.15-0ubuntu10.13) 但是 2.19-0ubuntu6.6 正要被安装
E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。

```

**error**

```
 cmake/readline.cmake:127 (FIND_CURSES)
 cmake/readline.cmake:217 (MYSQL_USE_BUNDLED_LIBEDIT)
 CMakeLists.txt:257 (MYSQL_CHECK_READLINE) 
```

tips:
删除所有的CMakeLists.txt文件，重新运行cmake

```
find / -name CMakeCache.txt
```

依次删除查找结果，重新cmake



**Part3. PHP安装**

php ./configure配置对mysql的支持

**FastCGI**
CGI(Common Gateway Interface)通用网关接口，用于描述浏览器与服务器数据传输的标准。CGI是fork--and-execute模式，而FastCGI则常驻服务器，请求到达时无需fork进程处理，性能较CGI更高。

**PHP FPM(FastCGI Process Manange)**
php fpm已经包含在新版php中，在./configure时添加-enable-fpm即可。

** 一. 安装依赖**
**1.安装libxml**

```
sudo apt-get install libxml2
sudo apt-get install libxml2-dev
```
**2. 安装libiconv（字符编码转换库）**
下载地址：http://www.gnu.org/software/libiconv/

```
$./configure --prefix=/usr/local/liblibiconv
$make
$sudo make install
```

**error:**
In file included from progname.c:26:0:
./stdio.h:1010:1: error: ‘gets’ undeclared here (not in a function)
 _GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");
 **tips:**
 修改文件 /libiconv-1.14/srclib/stdio.in.h

```
//替换
_GL_WARN_ON_USE(gets, "gets is a security hole - use fgets instead");
//成为
#if defined(__GLIBC__) && !defined(__UCLIBC__) && !__GLIBC_PREREQ(2, 16)
_GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");
#endif
```

**3.安装curl**

```
$wget http://curl.haxx.se/download/curl-7.48.0.tar.gz
$tar -zxvf curl-7.48.0.tar.gz
$cd curl-7.48.0/
$./configure --prefix=/usr/local/curl
$make
$make install

```
**4.安装libmcrypt**
ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/libmcrypt/


** 二. 安装php**

```
sudo ./configure --prefix=/usr/local/php7  \
--enable-fpm  \
--with-config-file-path=/usr/local/php7/bin  \
--with-iconv=/usr/local/lib/libiconv  \
--enable-mysqlnd  \
--with-mysqli=/usr/bin/mysql_config  \
--with-pdo-mysql=/usr  \
--with-mysql-sock=/var/run/mysqld/mysqld.sock  \
--with-mcrypt  \
--with-mhash  \
--with-zlib  \
--enable-xml  \
--enable-bcmath  \
--enable-shmop  \
--enable-inline-optimization  \
--enable-mbregex  \
--enable-fpm  \
--enable-mbstring  \
--enable-ftp  \
--enable-gd-native-ttf  \
--with-openssl  \
--enable-pcntl  \
--enable-sockets  \
--with-xmlrpc  \
--enable-zip  \
--enable-soap  \
--without-pear  \
--with-gettext=/usr/lib/gettext  \
--enable-session  \
--with-curl  \
--with-jpeg-dir  \
--with-freetype-dir  \
--enable-opcache
$sudo make
$sudo make test
$sudo make install
$sudo ln -s /usr/local/php7/bin/php /usr/bin/php
```
*安装成功*

![安装php成功](http://img.blog.csdn.net/20151231191230909)

**4. 启动PHP-FPM**

```
$sudo /usr/local/php7/sbin/php-fpm
```
**关闭重启**

```
php-fpm 关闭：
$sudo kill -INT `cat /usr/local/php/var/run/php-fpm.pid`
php-fpm 重启：
$sudo kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`
```

**error:**

```
hanying@HY:/usr/local/php7/etc$ cp php-fpm.conf.default php-fpm.conf
cp: cannot create regular file ‘php-fpm.conf’: Permission denied
hanying@HY:/usr/local/php7/etc$ sudo cp php-fpm.conf.default php-fpm.conf
hanying@HY:/usr/local/php7/etc$ vi php-fpm.conf
hanying@HY:/usr/local/php7/etc$ sudo gedit php-fpm.conf
```
**tips:**

```
$cd /usr/local/php7/etc/
$cp php-fpm.conf.default php-fpm.conf
//修改php-fpm.conf
//去掉注释
;error_log=/usr/local/php7/var/log/php-fpm.loc
```
**error:**

```
[31-Dec-2015 19:37:05] WARNING: Nothing matches the include pattern '/usr/local/php7/etc/php-fpm.d/*.conf' from /usr/local/php7/etc/php-fpm.conf at line 125.
[31-Dec-2015 19:37:05] ERROR: failed to open error_log (/usr/local/php7/var/log/php-fpm.log): Permission denied (13)
[31-Dec-2015 19:37:05] ERROR: failed to post process the configuration
[31-Dec-2015 19:37:05] ERROR: FPM initialization failed

```
**tips:**

```
$cd /usr/local/php7/etc/php-fpm.d
$cp www.conf.default www.conf
//修改www.conf
user = nginx
group = nginx
```
**error**

```
[31-Dec-2015 19:43:30] ERROR: failed to open error_log (/usr/local/php7/var/log/php-fpm.log): Permission denied (13)
[31-Dec-2015 19:43:30] ERROR: failed to post process the configuration
[31-Dec-2015 19:43:30] ERROR: FPM initialization failed

```
**tips:**

```
$chmod 777 /usr/local/php7/var/log
```

**error:**

```
[31-Dec-2015 19:47:51] ERROR: unable to bind listening socket for address '127.0.0.1:9000': Address already in use (98)
[31-Dec-2015 19:47:51] ERROR: FPM initialization failed

```
**tips:**

```
//杀掉占用端口的进程
$lsof -P | grep ':9000' | awk '{print $2}' | xargs kill -9
//或修改配置文件
/usr/local/php7/etc/php-fpm.d/www.conf
//修改端口号9000 -> 9012
```
**修改nginx配置**

```
//nginx配置文件：/usr/local/nginx/nginx.conf
location ~ \.php$ {
	root           html;
	fastcgi_pass   127.0.0.1:9000;
	fastcgi_index  index.php;
	fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
	include        fastcgi_params;
}

```
**重启nginx**

```
$sudo /usr/local/nginx/nginx -s reload
```
**Q:两个端口号设置不一致，为什么可以启动PHP-FPM?**

**软件管理器RPM和DPKG**
>dbkg: Debian /Ubuntu 
>rpm: Red Hat/CentOS


包搜索：
`$apt-get update`
 `$apt-cache seatch search_string`
 
 安装包：
 `$apt-get update`

 删除包：
 `$apt-get remove package_name`
 `$apt-get autoremove`
 
 更新包：
 `$apt-get update`

 软件包列表命令：
 `$dpkg --list`
 
 判断软件是否安装，软件包状态命令：
 `$dpkg --status package_name`

 软件包信息查看命令：
 `$apt-cache show package_name`

 查看某个文件是由哪个软件包安装得到，查询文件所属命令
 `$dpkg --search file_name`

------

**在编译php时，起初并不知道扩展mysql必须在编译时加参数，现在做个补充**
php7支持mysql扩展如下：
![这里写图片描述](http://img.blog.csdn.net/20160118191532205)

编译参数：

```
$sudo ./configure --prefix=/usr/local/php7 --enable-fpm --with-config-file-path=/usr/local/php7/bin --with-iconv=/usr/local/lib/libiconv --enable-mysqlnd --with-mysqli=/usr/bin/mysql_config  --with-pdo-mysql=/usr --with-mysql-sock=/var/run/mysqld/mysqld.sock
```
其中

```
--with-mysqli= #为mysql_config文件地址 （whereis mysql_config）
```

重新安装。


**phpmyadmin安装**
为了支持phpmyadmin php需要开启很多扩展
其中 --with-...后参数为安装路径 或 配置文件路径

```
sudo ./configure --prefix=/usr/local/php7  \
--enable-fpm  \
--with-config-file-path=/usr/local/php7/bin  \
--with-iconv=/usr/local/lib/libiconv  \
--enable-mysqlnd  \
--with-mysqli=/usr/bin/mysql_config  \
--with-pdo-mysql=/usr  \
--with-mysql-sock=/var/run/mysqld/mysqld.sock  \
--with-mcrypt  \
--with-mhash  \
--with-zlib  \
--enable-xml  \
--enable-bcmath  \
--enable-shmop  \
--enable-inline-optimization  \
--enable-mbregex  \
--enable-fpm  \
--enable-mbstring  \
--enable-ftp  \
--enable-gd-native-ttf  \
--with-openssl  \
--enable-pcntl  \
--enable-sockets  \
--with-xmlrpc  \
--enable-zip  \
--enable-soap  \
--without-pear  \
--with-gettext=/usr/lib/gettext  \
--enable-session  \
--with-curl  \
--with-jpeg-dir  \
--with-freetype-dir  \
--enable-opcache
```

```
$sudo apt-get install phpmyadmin
```
安装路径：/usr/share/phpmyadmin

配置所在路径：/etc/phpmyadmin

```
$cp /usr/share/phpmyadmin/config.sample.inc.php /etc/phpmyadmin/config.inc.php
```
修改 /etc/phpmyadmin/config.inc.php

```
 //$cfg['Servers'][$i]['connect_type'] = 'tcp';           
 $cfg['Servers'][$i]['socket'] = '/var/run/mysqld/mysqld.sock'; //找到自己的mysqld.sock路径
 //通常在安装mysql之后my.cnf中会有该路径
 $cfg['Servers'][$i]['connect_type'] = 'socket';
 //将原来的tcp改为socket
```
**登录http://localhost/phpmyadmin/**访问phpmyadmin

