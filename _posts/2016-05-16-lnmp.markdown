---
layout: post
title:  "LNMP服务器配置"
date:   2016-05-16 09:50:31 +0530
categories: ["architect"]
author: "Chyler"
---

本文LNMP服务器配置基于Ubuntu 14.04，通常LNMP按照Nginx -> MySQL -> PHP的顺序安装配置。

### Part1. Nginx安装

**安装法一**

**1. nginx依赖安装**

- gzip模块 zlib库 
下载地址：http://www.zlib.net/  文件：zlib-1.2.8.tar.gz

```
$tar -xzvf zlib-1.2.8.tar.gz
$cd zlib-1.2.8
$./configure
$make 
$sudo make install
```

- rewrire模块 pcre库
下载地址: http://www.pcre.org/ 文件：pcre-8.38.tar.gz（推荐，10.10版本make不通过）

```
$tar -xzvf pcre-8.38.tar.gz
$cd pcre-8.38
$./configure
$make
$sudo make install
```

- ssl模块 openssl库
下载地址: http://distfiles.macports.org/openssl/ 文件：openssl-1.0.1g.tar.gz（不推荐1.0.1c版本，各种问题）

```
$tar -xzvf openssl-1.0.1g.tar.gz
$cd openssl-1.0.1g
$./config
$make
$sudo make install
```
**error：** 
POD document had syntax errors at /usr/bin/pod2man line 69. make
**tips：** 
```
rm /usr/bin/pod2man
```

**2. nginx安装**

```
$tar -zxvf nginx-1.8.0.tar.gz
$cd nginx.1.8.0
$groupadd -r nginx
$useradd -r -g nginx -s /bin/false -M nginx
$sudo ./configure --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-http_ssl_module --with-pcre=../pcre-8.38 --with-zlib=../zlib-1.2.8 --with-openssl=../openssl-1.0.1g --with-http_stub_status_module --user=nginx --group=nginx
$sudo make
$sudo make install

```
**tips：**
./configure参数中 --with-pcre=指向解压的源码目录

**error:**
make[2]: Entering directory \`/usr/local/src/pcre2-10.10\`
make[2]: \*** No rule to make target \`libpcre.la\`.  Stop.
make[2]: Leaving directory \`/usr/local/src/pcre2-10.10\`
make[1]: \*** [../pcre2-10.10/.libs/libpcre.a] Error 2
make[1]: Leaving directory `/usr/local/src/nginx-1.8.0'
make: \*** [build] Error 2
**tips:**
pcre2-10.10的问题，换个版本就解决了。具体为什么出问题我也不知道。

**3. 安装成功**
自动创建/usr/local/nginx
![/usr/local/nginx目录](http://img.blog.csdn.net/20151230200733541)

**4. 手动启动**
```
//不指定配置文件
sudo /usr/local/nginx/nginx
//指定配置文件
/usr/local/nginx/nginx -c /usr/local/nginx/nginx.conf
```
![启动成功](http://img.blog.csdn.net/20151230201541049)

**5. 停止服务**
```
$sudo kill `cat /usr/local/nginx/nginx.pid`
```

**安装法二**
```
$sudo apt-get install nginx
```
- 配置文件 /etc/nginx/nginx.conf  
- 程序文件目录 /usr/sbin/nginx  
- 错误日志 /var/log/nginx/error.log 
- 启动脚本 /etc/init.d/nginx 

**安装法三【官网】**
```
$sudo -s
#nginx=stable
#add-apt-repository ppa:nginx/$nginx
#apt-get update
#apt-get install nginx
```
*安装成功后 nginx已启动*
![启动nginx成功](http://img.blog.csdn.net/20151230143338582)


手动开启服务

 方式一
```
$/etc/init.d/nginx start
```
开启失败时，检查/etc/init.d/nginx启动脚本
原脚本：

```
#! /bin/sh

### BEGIN INIT INFO
# Provides:          nginx
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts the nginx web server
# Description:       starts nginx using start-stop-daemon
### END INIT INFO

PATH=/opt/nginx/sbin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/opt/nginx/sbin/nginx
NAME=nginx
DESC=nginx

test -x $DAEMON || exit 0

# Include nginx defaults if available
if [ -f /etc/default/nginx ] ; then
        . /etc/default/nginx
fi

set -e

case "$1" in
  start)
        echo -n "Starting $DESC: "
        start-stop-daemon --start --quiet --pidfile /opt/nginx/logs/$NAME.pid \
                --exec $DAEMON -- $DAEMON_OPTS
        echo "$NAME."
        ;;
  stop)
        echo -n "Stopping $DESC: "
        start-stop-daemon --stop --quiet --pidfile /opt/nginx/logs/$NAME.pid \
                --exec $DAEMON
        echo "$NAME."
        ;;
  restart|force-reload)
        echo -n "Restarting $DESC: "
        start-stop-daemon --stop --quiet --pidfile \
                /opt/nginx/logs/$NAME.pid --exec $DAEMON
        sleep 1
        start-stop-daemon --start --quiet --pidfile \
                /opt/nginx/logs/$NAME.pid --exec $DAEMON -- $DAEMON_OPTS
        echo "$NAME."
        ;;
  reload)
          echo -n "Reloading $DESC configuration: "
          start-stop-daemon --stop --signal HUP --quiet --pidfile     /opt/nginx/logs/$NAME.pid \
              --exec $DAEMON
          echo "$NAME."
          ;;
      *)
            N=/etc/init.d/$NAME
            echo "Usage: $N {start|stop|restart|reload|force-reload}" >&2
            exit 1
            ;;
    esac

    exit 0

```

方式二
```
/usr/sbin/nginx -c /etc/nginx/nginx.conf
```
*成功开启*
查看nginx进程
```
ps aux|grep nginx
```

![查看nginx进程](http://img.blog.csdn.net/20151230114257447)

访问http://localhost:80/index.html查看欢迎界面

停止服务
```
/etc/init.d/nginx -s stop
```
*也可以直接kill掉nginx主进程*

重启服务
```
/etc/init.d/nginx -s reload
```

### Part2. MySQL安装

下载地址：http://dev.mysql.com/downloads/mysql/
select platform: Source Code
Generic Linux (Architecture Independent), Compressed TAR Archive
<a href="http://dev.mysql.com/downloads/file/?id=460600">(mysql-5.6.28.tar.gz)</a>

**安装mysql**
```
$sudo tar -zxvf mysql-5.6.28.tar.gz
$cd mysql-5.6.28.tar.gz
$sudo cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS:STRING=utf8,gbk -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1 -DMYSQL_DATADIR=/var/mysql/data
$sudo make
$sudo make install
```
**配置mysql**

```
//进入mysql的安装目录 /usr/local/mysql
//创建用户组和用户
$sudo groupadd mysql
$sudo useradd -g mysql mysql
//创建pid文件
//$sudo touch mysql.pid
//设置mysql安装目录权限
$sudo chown -R mysal:mysql ./  // “./”为mysql的安装路径
//复制配置文件
$sudo cp support-files/my-default.cnf /etc/my.cnf
$sudo chown mysql:mysql /etc/my.cnf
//修改配置文件
$sudo vi /etc/my.cnf
```
>[client]
port = 3306
socket = /usr/local/mysql/data/mysql.sock
[mysqld]
port = 3306
socket = /usr/local/mysql/data/mysql.sock
basedir = /usr/local/mysql
datadir  = /usr/local/mysql/data
pid-file = /usr/local/mysql/mysql.pid
```
//初始化mysql
$sudo scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data/
```
**启动mysql**
```
//法一 直接启动
$sudo bin/mysqld_safe &
//法二 
$cd /usr/local/mysql/
$cp support-files/mysql.server /etc/init.d/mysql

```
**error：**

```
. * The server quit without updating PID file (/usr/local/mysql/mysql.pid).
```
查看错误日志

```
160106 14:58:36 mysqld_safe Starting mysqld daemon with databases from /usr/local/mysql/data
2016-01-06 14:58:36 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2016-01-06 14:58:36 0 [Note] /usr/local/mysql/bin/mysqld (mysqld 5.6.28) starting as process 25960 ...
2016-01-06 14:58:36 25960 [Note] Plugin 'FEDERATED' is disabled.
/usr/local/mysql/bin/mysqld: Can't find file: './mysql/plugin.frm' (errno: 13 - Permission denied)
2016-01-06 14:58:36 25960 [ERROR] Can't open the mysql.plugin table. Please run mysql_upgrade to create it.
2016-01-06 14:58:36 25960 [Note] InnoDB: Using atomics to ref count buffer pool pages
2016-01-06 14:58:36 25960 [Note] InnoDB: The InnoDB memory heap is disabled
2016-01-06 14:58:36 25960 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins
2016-01-06 14:58:36 25960 [Note] InnoDB: Memory barrier is not used
2016-01-06 14:58:36 25960 [Note] InnoDB: Compressed tables use zlib 1.2.3
2016-01-06 14:58:36 25960 [Note] InnoDB: Using Linux native AIO
2016-01-06 14:58:36 25960 [Note] InnoDB: Using CPU crc32 instructions
2016-01-06 14:58:36 25960 [Note] InnoDB: Initializing buffer pool, size = 128.0M
2016-01-06 14:58:37 25960 [Note] InnoDB: Completed initialization of buffer pool
2016-01-06 14:58:37 25960 [ERROR] InnoDB: ./ibdata1 can't be opened in read-write mode
2016-01-06 14:58:37 25960 [ERROR] InnoDB: The system tablespace must be writable!
2016-01-06 14:58:37 25960 [ERROR] Plugin 'InnoDB' init function returned error.
2016-01-06 14:58:37 25960 [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed.
2016-01-06 14:58:37 25960 [ERROR] Unknown/unsupported storage engine: InnoDB
2016-01-06 14:58:37 25960 [ERROR] Aborting

2016-01-06 14:58:37 25960 [Note] Binlog end
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'partition'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'ARCHIVE'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'PERFORMANCE_SCHEMA'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_DATAFILES'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_TABLESPACES'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_FOREIGN_COLS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_FOREIGN'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_FIELDS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_COLUMNS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_INDEXES'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_TABLESTATS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_SYS_TABLES'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_INDEX_TABLE'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_INDEX_CACHE'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_CONFIG'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_BEING_DELETED'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_DELETED'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_FT_DEFAULT_STOPWORD'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_METRICS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_BUFFER_POOL_STATS'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_BUFFER_PAGE_LRU'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_BUFFER_PAGE'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMP_PER_INDEX_RESET'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMP_PER_INDEX'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMPMEM_RESET'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMPMEM'
2016-01-06 14:58:37 25960 [Note] Shutting down plugin 'INNODB_CMP_RESET'
```
**tips：重新初始化，修改data目录下所有文件权限为777**

```
To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system

PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
To do so, start the server, then issue the following commands:

  /usr/local/mysql/bin/mysqladmin -u root password 'new-password'
  /usr/local/mysql/bin/mysqladmin -u root -h HY password 'new-password'

Alternatively you can run:

  /usr/local/mysql/bin/mysql_secure_installation

which will also give you the option of removing the test
databases and anonymous user created by default.  This is
strongly recommended for production servers.

See the manual for more instructions.

You can start the MySQL daemon with:

  cd . ; /usr/local/mysql/bin/mysqld_safe &

You can test the MySQL daemon with mysql-test-run.pl

  cd mysql-test ; perl mysql-test-run.pl

Please report any problems at http://bugs.mysql.com/

The latest information about MySQL is available on the web at

  http://www.mysql.com

Support MySQL by buying support/licenses at http://shop.mysql.com

WARNING: Found existing config file /usr/local/mysql/my.cnf on the system.
Because this file might be in use, it was not replaced,
but was used in bootstrap (unless you used --defaults-file)
and when you later start the server.
The new default config file was created as /usr/local/mysql/my-new.cnf,
please compare it with your file and take the changes you need.

WARNING: Default config file /etc/my.cnf exists on the system
This file will be read by default by the MySQL server
If you do not want to use this, either remove it, or use the
--defaults-file argument to mysqld_safe when starting the server

```
**重新启动 成功**
![启动mysql成功](http://img.blog.csdn.net/20160106153706992)

------
未知原因 mysql启动不成功
**重新安装**，需要在安装前彻底清除mysql

```
sudo apt-get --purge remove mysql-server
sudo apt-get --purge remove mysql-client
sudo apt-get --purge remove mysql-common
sudo apt-get autoremove
sudo apt-get autoclean

sudo rm -rf /etc/mysql
sudo rm -rf /var/lib/mysql

#检查
which mysql #empty
whereis mysql #empty
mysql --verson #mysql is not installed
```

重新安装

```
sudo apt-get update
sudo apt-get install mysql-server
sudo apt-get install mysql-client
sudo apt-get install libmysqlclient-dev
```
安装成功

```
ps aux | grep mysql
```
![这里写图片描述](http://img.blog.csdn.net/20160118181350734)

登录
```
#用户名：root 密码：123456
mysql -uroot -p123456
```

**环境不同可能会出现不一样的问题**
有很大程度是因为apt源的问题导致的：
下面是我的源
```
deb http://mirrors.sohu.com/ubuntu/ precise main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-security main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-updates main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-proposed main restricted universe multiverse
deb http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-security main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-updates main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-proposed main restricted universe multiverse
deb-src http://mirrors.sohu.com/ubuntu/ precise-backports main restricted universe multiverse
```
注意系统更新要勾选
![这里写图片描述](http://img.blog.csdn.net/20160317191654694)
![这里写图片描述](http://img.blog.csdn.net/20160317191706632)

这样可以解决如下问题

```
有一些软件包无法被安装。如果您用的是 unstable 发行版，这也许是
因为系统无法达到您要求的状态造成的。该版本中可能会有一些您需要的软件
包尚未被创建或是它们已被从新到(Incoming)目录移出。
下列信息可能会对解决问题有所帮助：

下列软件包有未满足的依赖关系：
 libc6-i386 : 依赖: libc6 (= 2.15-0ubuntu10.13) 但是 2.19-0ubuntu6.6 正要被安装
E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。

```

**error**

```
 cmake/readline.cmake:127 (FIND_CURSES)
 cmake/readline.cmake:217 (MYSQL_USE_BUNDLED_LIBEDIT)
 CMakeLists.txt:257 (MYSQL_CHECK_READLINE) 
```
tips:
删除所有的CMakeLists.txt文件，重新运行cmake

```
find / -name CMakeCache.txt
```
依次删除查找结果，重新cmake








### Part3. PHP安装
php ./configure配置对mysql的支持
**FastCGI**
CGI(Common Gateway Interface)通用网关接口，用于描述浏览器与服务器数据传输的标准。CGI是fork--and-execute模式，而FastCGI则常驻服务器，请求到达时无需fork进程处理，性能较CGI更高。

**PHP FPM(FastCGI Process Manange)**
php fpm已经包含在新版php中，在./configure时添加-enable-fpm即可。

** 一. 安装依赖**
**1.安装libxml**
```
sudo apt-get install libxml2
sudo apt-get install libxml2-dev
```
**2. 安装libiconv（字符编码转换库）**
下载地址：http://www.gnu.org/software/libiconv/
```
$./configure --prefix=/usr/local/liblibiconv
$make
$sudo make install
```

**error:**
In file included from progname.c:26:0:
./stdio.h:1010:1: error: ‘gets’ undeclared here (not in a function)
 _GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");
 **tips:**
 修改文件 /libiconv-1.14/srclib/stdio.in.h
```
//替换
_GL_WARN_ON_USE(gets, "gets is a security hole - use fgets instead");
//成为
#if defined(__GLIBC__) && !defined(__UCLIBC__) && !__GLIBC_PREREQ(2, 16)
_GL_WARN_ON_USE (gets, "gets is a security hole - use fgets instead");
#endif
```
**3.安装curl**

```
$wget http://curl.haxx.se/download/curl-7.48.0.tar.gz
$tar -zxvf curl-7.48.0.tar.gz
$cd curl-7.48.0/
$./configure --prefix=/usr/local/curl
$make
$make install
```
**4.安装libmcrypt**
ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/libmcrypt/
** 二. 安装php**
```
sudo ./configure --prefix=/usr/local/php7  \
--enable-fpm  \
--with-config-file-path=/usr/local/php7/bin  \
--with-iconv=/usr/local/lib/libiconv  \
--enable-mysqlnd  \
--with-mysqli=/usr/bin/mysql_config  \
--with-pdo-mysql=/usr  \
--with-mysql-sock=/var/run/mysqld/mysqld.sock  \
--with-mcrypt  \
--with-mhash  \
--with-zlib  \
--enable-xml  \
--enable-bcmath  \
--enable-shmop  \
--enable-inline-optimization  \
--enable-mbregex  \
--enable-fpm  \
--enable-mbstring  \
--enable-ftp  \
--enable-gd-native-ttf  \
--with-openssl  \
--enable-pcntl  \
--enable-sockets  \
--with-xmlrpc  \
--enable-zip  \
--enable-soap  \
--without-pear  \
--with-gettext=/usr/lib/gettext  \
--enable-session  \
--with-curl  \
--with-jpeg-dir  \
--with-freetype-dir  \
--enable-opcache
$sudo make
$sudo make test
$sudo make install
$sudo ln -s /usr/local/php7/bin/php /usr/bin/php
```
*安装成功*
![安装php成功](http://img.blog.csdn.net/20151231191230909)

**4. 启动PHP-FPM**

```
$sudo /usr/local/php7/sbin/php-fpm
```
**关闭重启**

```
php-fpm 关闭：
$sudo kill -INT `cat /usr/local/php/var/run/php-fpm.pid`
php-fpm 重启：
$sudo kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`
```

**error:**
```
hanying@HY:/usr/local/php7/etc$ cp php-fpm.conf.default php-fpm.conf
cp: cannot create regular file ‘php-fpm.conf’: Permission denied
hanying@HY:/usr/local/php7/etc$ sudo cp php-fpm.conf.default php-fpm.conf
hanying@HY:/usr/local/php7/etc$ vi php-fpm.conf
hanying@HY:/usr/local/php7/etc$ sudo gedit php-fpm.conf
```
**tips:**
```
$cd /usr/local/php7/etc/
$cp php-fpm.conf.default php-fpm.conf
//修改php-fpm.conf
//去掉注释
;error_log=/usr/local/php7/var/log/php-fpm.loc
```
**error:**

```
[31-Dec-2015 19:37:05] WARNING: Nothing matches the include pattern '/usr/local/php7/etc/php-fpm.d/*.conf' from /usr/local/php7/etc/php-fpm.conf at line 125.
[31-Dec-2015 19:37:05] ERROR: failed to open error_log (/usr/local/php7/var/log/php-fpm.log): Permission denied (13)
[31-Dec-2015 19:37:05] ERROR: failed to post process the configuration
[31-Dec-2015 19:37:05] ERROR: FPM initialization failed

```
**tips:**

```
$cd /usr/local/php7/etc/php-fpm.d
$cp www.conf.default www.conf
//修改www.conf
user = nginx
group = nginx
```
**error**

```
[31-Dec-2015 19:43:30] ERROR: failed to open error_log (/usr/local/php7/var/log/php-fpm.log): Permission denied (13)
[31-Dec-2015 19:43:30] ERROR: failed to post process the configuration
[31-Dec-2015 19:43:30] ERROR: FPM initialization failed

```
**tips:**

```
$chmod 777 /usr/local/php7/var/log
```

**error:**

```
[31-Dec-2015 19:47:51] ERROR: unable to bind listening socket for address '127.0.0.1:9000': Address already in use (98)
[31-Dec-2015 19:47:51] ERROR: FPM initialization failed

```
**tips:**

```
//杀掉占用端口的进程
$lsof -P | grep ':9000' | awk '{print $2}' | xargs kill -9
//或修改配置文件
/usr/local/php7/etc/php-fpm.d/www.conf
//修改端口号9000 -> 9012
```
**修改nginx配置**

```
//nginx配置文件：/usr/local/nginx/nginx.conf
location ~ \.php$ {
	root           html;
	fastcgi_pass   127.0.0.1:9000;
	fastcgi_index  index.php;
	fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
	include        fastcgi_params;
}

```
**重启nginx**
```
$sudo /usr/local/nginx/nginx -s reload
```
**Q:两个端口号设置不一致，为什么可以启动PHP-FPM?**

**软件管理器RPM和DPKG**
>dbkg: Debian /Ubuntu 
>rpm: Red Hat/CentOS


包搜索：
`$apt-get update`
 `$apt-cache seatch search_string`
 
 安装包：
 `$apt-get update`

 删除包：
 `$apt-get remove package_name`
 `$apt-get autoremove`
 
 更新包：
 `$apt-get update`

 软件包列表命令：
 `$dpkg --list`
 
 判断软件是否安装，软件包状态命令：
 `$dpkg --status package_name`

 软件包信息查看命令：
 `$apt-cache show package_name`

 查看某个文件是由哪个软件包安装得到，查询文件所属命令
 `$dpkg --search file_name`

------
**在编译php时，起初并不知道扩展mysql必须在编译时加参数，现在做个补充**
php7支持mysql扩展如下：
![这里写图片描述](http://img.blog.csdn.net/20160118191532205)

编译参数：
```
$sudo ./configure --prefix=/usr/local/php7 --enable-fpm --with-config-file-path=/usr/local/php7/bin --with-iconv=/usr/local/lib/libiconv --enable-mysqlnd --with-mysqli=/usr/bin/mysql_config  --with-pdo-mysql=/usr --with-mysql-sock=/var/run/mysqld/mysqld.sock
```
其中

```
--with-mysqli= #为mysql_config文件地址 （whereis mysql_config）
```

重新安装。

**附.php编译参数：**

```
hanying@HY:/usr/local/src/php-7.0.1$ ./configure --help
`configure' configures this package to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/PACKAGE]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET   configure for building compilers for TARGET [HOST]

Optional Features and Packages:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-libdir=NAME      Look for libraries in .../NAME rather than .../lib
  --disable-rpath         Disable passing additional runtime library
                          search paths
  --enable-re2c-cgoto     Enable -g flag to re2c to use computed goto gcc extension
  --disable-gcc-global-regs
                          whether to enable GCC global register variables

SAPI modules:

  --with-apxs2=FILE       Build shared Apache 2.0 Handler module. FILE is the optional
                          pathname to the Apache apxs tool apxs
  --disable-cli           Disable building CLI version of PHP
                          (this forces --without-pear)
  --enable-embed=TYPE     EXPERIMENTAL: Enable building of embedded SAPI library
                          TYPE is either 'shared' or 'static'. TYPE=shared
  --enable-fpm            Enable building of the fpm SAPI executable
  --with-fpm-user=USER    Set the user for php-fpm to run as. (default: nobody)
  --with-fpm-group=GRP    Set the group for php-fpm to run as. For a system user, this
                          should usually be set to match the fpm username (default: nobody)
  --with-fpm-systemd      Activate systemd integration
  --with-fpm-acl          Use POSIX Access Control Lists
  --with-litespeed        Build PHP as litespeed module
  --enable-phpdbg            Build phpdbg
  --enable-phpdbg-webhelper  Build phpdbg web SAPI support
  --enable-phpdbg-debug      Build phpdbg in debug mode
  --disable-cgi           Disable building CGI version of PHP

General settings:

  --enable-gcov           Enable GCOV code coverage (requires LTP) - FOR DEVELOPERS ONLY!!
  --enable-debug          Compile with debugging symbols
  --with-layout=TYPE      Set how installed files will be laid out.  Type can
                          be either PHP or GNU [PHP]
  --with-config-file-path=PATH
                          Set the path in which to look for php.ini [PREFIX/lib]
  --with-config-file-scan-dir=PATH
                          Set the path where to scan for configuration files
  --enable-sigchild       Enable PHP's own SIGCHLD handler
  --enable-libgcc         Enable explicitly linking against libgcc
  --disable-short-tags    Disable the short-form <? start tag by default
  --enable-dmalloc        Enable dmalloc
  --disable-ipv6          Disable IPv6 support
  --enable-dtrace         Enable DTrace support
  --enable-fd-setsize     Set size of descriptor sets

Extensions:

  --with-EXTENSION=shared[,PATH]

    NOTE: Not all extensions can be build as 'shared'.

    Example: --with-foobar=shared,/usr/local/foobar/

      o Builds the foobar extension as shared extension.
      o foobar package install prefix is /usr/local/foobar/


  --disable-all           Disable all extensions which are enabled by default

  --disable-libxml        Disable LIBXML support
  --with-libxml-dir=DIR   LIBXML: libxml2 install prefix
  --with-openssl=DIR      Include OpenSSL support (requires OpenSSL >= 0.9.8)
  --with-kerberos=DIR     OPENSSL: Include Kerberos support
  --with-system-ciphers   OPENSSL: Use system default cipher list instead of hardcoded value
  --with-pcre-regex=DIR   Include Perl Compatible Regular Expressions support.
                          DIR is the PCRE install prefix BUNDLED
  --without-sqlite3=DIR   Do not include SQLite3 support. DIR is the prefix to
                          SQLite3 installation directory.
  --with-zlib=DIR         Include ZLIB support (requires zlib >= 1.0.9)
  --with-zlib-dir=<DIR>   Define the location of zlib install directory
  --enable-bcmath         Enable bc style precision math functions
  --with-bz2=DIR          Include BZip2 support
  --enable-calendar       Enable support for calendar conversion
  --disable-ctype         Disable ctype functions
  --with-curl=DIR         Include cURL support
  --enable-dba            Build DBA with bundled modules. To build shared DBA
                          extension use --enable-dba=shared
  --with-qdbm=DIR         DBA: QDBM support
  --with-gdbm=DIR         DBA: GDBM support
  --with-ndbm=DIR         DBA: NDBM support
  --with-db4=DIR          DBA: Oracle Berkeley DB 4.x or 5.x support
  --with-db3=DIR          DBA: Oracle Berkeley DB 3.x support
  --with-db2=DIR          DBA: Oracle Berkeley DB 2.x support
  --with-db1=DIR          DBA: Oracle Berkeley DB 1.x support/emulation
  --with-dbm=DIR          DBA: DBM support
  --with-tcadb=DIR        DBA: Tokyo Cabinet abstract DB support
  --without-cdb=DIR       DBA: CDB support (bundled)
  --disable-inifile       DBA: INI support (bundled)
  --disable-flatfile      DBA: FlatFile support (bundled)
  --disable-dom           Disable DOM support
  --with-libxml-dir=DIR   DOM: libxml2 install prefix
  --with-enchant=DIR      Include enchant support.
                          GNU Aspell version 1.1.3 or higher required.
  --enable-exif           Enable EXIF (metadata from images) support
  --disable-fileinfo      Disable fileinfo support
  --disable-filter        Disable input filter support
  --with-pcre-dir         FILTER: pcre install prefix
  --enable-ftp            Enable FTP support
  --with-openssl-dir=DIR  FTP: openssl install prefix
  --with-gd=DIR           Include GD support.  DIR is the GD library base
                          install directory BUNDLED
  --with-webp-dir=DIR      GD: Set the path to libwebp install prefix
  --with-jpeg-dir=DIR     GD: Set the path to libjpeg install prefix
  --with-png-dir=DIR      GD: Set the path to libpng install prefix
  --with-zlib-dir=DIR     GD: Set the path to libz install prefix
  --with-xpm-dir=DIR      GD: Set the path to libXpm install prefix
  --with-freetype-dir=DIR GD: Set the path to FreeType 2 install prefix
  --enable-gd-native-ttf  GD: Enable TrueType string function
  --enable-gd-jis-conv    GD: Enable JIS-mapped Japanese font support
  --with-gettext=DIR      Include GNU gettext support
  --with-gmp=DIR          Include GNU MP support
  --with-mhash=DIR        Include mhash support
  --disable-hash          Disable hash support
  --without-iconv=DIR     Exclude iconv support
  --with-imap=DIR         Include IMAP support. DIR is the c-client install prefix
  --with-kerberos=DIR     IMAP: Include Kerberos support. DIR is the Kerberos install prefix
  --with-imap-ssl=DIR     IMAP: Include SSL support. DIR is the OpenSSL install prefix
  --with-interbase=DIR    Include Firebird support.  DIR is the Firebird base
                          install directory /opt/firebird
  --enable-intl           Enable internationalization support
  --with-icu-dir=DIR      Specify where ICU libraries and headers can be found
  --disable-json          Disable JavaScript Object Serialization support
  --with-ldap=DIR         Include LDAP support
  --with-ldap-sasl=DIR    LDAP: Include Cyrus SASL support
  --enable-mbstring       Enable multibyte string support
  --disable-mbregex       MBSTRING: Disable multibyte regex support
  --disable-mbregex-backtrack
                          MBSTRING: Disable multibyte regex backtrack check
  --with-libmbfl=DIR      MBSTRING: Use external libmbfl.  DIR is the libmbfl base
                          install directory BUNDLED
  --with-onig=DIR         MBSTRING: Use external oniguruma. DIR is the oniguruma install prefix.
                          If DIR is not set, the bundled oniguruma will be used
  --with-mcrypt=DIR       Include mcrypt support
  --with-mysqli=FILE      Include MySQLi support.  FILE is the path
                          to mysql_config.  If no value or mysqlnd is passed
                          as FILE, the MySQL native driver will be used
  --enable-embedded-mysqli
                          MYSQLi: Enable embedded support
                          Note: Does not work with MySQL native driver!
  --with-mysql-sock=SOCKPATH
                          MySQLi/PDO_MYSQL: Location of the MySQL unix socket pointer.
                          If unspecified, the default locations are searched
  --with-oci8=DIR         Include Oracle Database OCI8 support. DIR defaults to $ORACLE_HOME.
                          Use --with-oci8=instantclient,/path/to/instant/client/lib
                          to use an Oracle Instant Client installation
  --with-odbcver=HEX      Force support for the passed ODBC version. A hex number is expected, default 0x0300.
                             Use the special value of 0 to prevent an explicit ODBCVER to be defined.
  --with-adabas=DIR       Include Adabas D support /usr/local
  --with-sapdb=DIR        Include SAP DB support /usr/local
  --with-solid=DIR        Include Solid support /usr/local/solid
  --with-ibm-db2=DIR      Include IBM DB2 support /home/db2inst1/sqllib
  --with-ODBCRouter=DIR   Include ODBCRouter.com support /usr
  --with-empress=DIR      Include Empress support \$EMPRESSPATH
                          (Empress Version >= 8.60 required)
  --with-empress-bcs=DIR
                          Include Empress Local Access support \$EMPRESSPATH
                          (Empress Version >= 8.60 required)
  --with-birdstep=DIR     Include Birdstep support /usr/local/birdstep
  --with-custom-odbc=DIR  Include user defined ODBC support. DIR is ODBC install base
                          directory /usr/local. Make sure to define CUSTOM_ODBC_LIBS and
                          have some odbc.h in your include dirs. f.e. you should define
                          following for Sybase SQL Anywhere 5.5.00 on QNX, prior to
                          running this configure script:
                            CPPFLAGS=\"-DODBC_QNX -DSQLANY_BUG\"
                            LDFLAGS=-lunix
                            CUSTOM_ODBC_LIBS=\"-ldblib -lodbc\"
  --with-iodbc=DIR        Include iODBC support /usr/local
  --with-esoob=DIR        Include Easysoft OOB support /usr/local/easysoft/oob/client
  --with-unixODBC=DIR     Include unixODBC support /usr/local
  --with-dbmaker=DIR      Include DBMaker support
  --disable-opcache       Disable Zend OPcache support
  --disable-opcache-file  Disable file based caching
  --disable-huge-code-pages
                          Disable copying PHP CODE pages into HUGE PAGES
  --enable-pcntl          Enable pcntl support (CLI/CGI only)
  --disable-pdo           Disable PHP Data Objects support
  --with-pdo-dblib=DIR    PDO: DBLIB-DB support.  DIR is the FreeTDS home directory
  --with-pdo-firebird=DIR PDO: Firebird support.  DIR is the Firebird base
                          install directory /opt/firebird
  --with-pdo-mysql=DIR    PDO: MySQL support. DIR is the MySQL base directory
                          If no value or mysqlnd is passed as DIR, the
                          MySQL native driver will be used
  --with-zlib-dir=DIR     PDO_MySQL: Set the path to libz install prefix
  --with-pdo-oci=DIR      PDO: Oracle OCI support. DIR defaults to \$ORACLE_HOME.
                          Use --with-pdo-oci=instantclient,prefix,version
                          for an Oracle Instant Client SDK.
                          For example on Linux with 11.2 RPMs use:
                            --with-pdo-oci=instantclient,/usr,11.2
                          With 10.2 RPMs use:
                            --with-pdo-oci=instantclient,/usr,10.2.0.4
  --with-pdo-odbc=flavour,dir
                          PDO: Support for 'flavour' ODBC driver.
			  include and lib dirs are looked for under 'dir'.

			  'flavour' can be one of:  ibm-db2, iODBC, unixODBC, generic
			  If ',dir' part is omitted, default for the flavour
			  you have selected will be used. e.g.:

			    --with-pdo-odbc=unixODBC

			  will check for unixODBC under /usr/local. You may attempt
			  to use an otherwise unsupported driver using the \"generic\"
			  flavour.  The syntax for generic ODBC support is:

			    --with-pdo-odbc=generic,dir,libname,ldflags,cflags

			  When built as 'shared' the extension filename is always pdo_odbc.so
  --with-pdo-pgsql=DIR    PDO: PostgreSQL support.  DIR is the PostgreSQL base
                          install directory or the path to pg_config
  --without-pdo-sqlite=DIR
                          PDO: sqlite 3 support.  DIR is the sqlite base
                          install directory BUNDLED
  --with-pgsql=DIR        Include PostgreSQL support.  DIR is the PostgreSQL
                          base install directory or the path to pg_config
  --disable-phar          Disable phar support
  --disable-posix         Disable POSIX-like functions
  --with-pspell=DIR       Include PSPELL support.
                          GNU Aspell version 0.50.0 or higher required
  --with-libedit=DIR      Include libedit readline replacement (CLI/CGI only)
  --with-readline=DIR     Include readline support (CLI/CGI only)
  --with-recode=DIR       Include recode support
  --disable-session       Disable session support
  --with-mm=DIR           SESSION: Include mm support for session storage
  --enable-shmop          Enable shmop support
  --disable-simplexml     Disable SimpleXML support
  --with-libxml-dir=DIR   SimpleXML: libxml2 install prefix
  --with-snmp=DIR         Include SNMP support
  --with-openssl-dir=DIR  SNMP: openssl install prefix
  --enable-soap           Enable SOAP support
  --with-libxml-dir=DIR   SOAP: libxml2 install prefix
  --enable-sockets        Enable sockets support
  --enable-sysvmsg        Enable sysvmsg support
  --enable-sysvsem        Enable System V semaphore support
  --enable-sysvshm        Enable the System V shared memory support
  --with-tidy=DIR         Include TIDY support
  --disable-tokenizer     Disable tokenizer support
  --enable-wddx           Enable WDDX support
  --with-libxml-dir=DIR   WDDX: libxml2 install prefix
  --with-libexpat-dir=DIR WDDX: libexpat dir for XMLRPC-EPI (deprecated)
  --disable-xml           Disable XML support
  --with-libxml-dir=DIR   XML: libxml2 install prefix
  --with-libexpat-dir=DIR XML: libexpat install prefix (deprecated)
  --disable-xmlreader     Disable XMLReader support
  --with-libxml-dir=DIR   XMLReader: libxml2 install prefix
  --with-xmlrpc=DIR       Include XMLRPC-EPI support
  --with-libxml-dir=DIR   XMLRPC-EPI: libxml2 install prefix
  --with-libexpat-dir=DIR XMLRPC-EPI: libexpat dir for XMLRPC-EPI (deprecated)
  --with-iconv-dir=DIR    XMLRPC-EPI: iconv dir for XMLRPC-EPI
  --disable-xmlwriter     Disable XMLWriter support
  --with-libxml-dir=DIR   XMLWriter: libxml2 install prefix
  --with-xsl=DIR          Include XSL support.  DIR is the libxslt base
                          install directory (libxslt >= 1.1.0 required)
  --enable-zip            Include Zip read/write support
  --with-zlib-dir=DIR     ZIP: Set the path to libz install prefix
  --with-pcre-dir         ZIP: pcre install prefix
  --with-libzip=DIR       ZIP: use libzip
  --enable-mysqlnd        Enable mysqlnd explicitly, will be done implicitly
                          when required by other extensions
  --disable-mysqlnd-compression-support
                          Disable support for the MySQL compressed protocol in mysqlnd
  --with-zlib-dir=DIR     mysqlnd: Set the path to libz install prefix

PEAR:

  --with-pear=DIR         Install PEAR in DIR [PREFIX/lib/php]
  --without-pear          Do not install PEAR

Zend:

  --enable-maintainer-zts Enable thread safety - for code maintainers only!!
  --disable-inline-optimization
                          If building zend_execute.lo fails, try this switch
  --enable-zend-signals   Use zend signal handling

TSRM:

  --with-tsrm-pth=pth-config
                          Use GNU Pth
  --with-tsrm-st          Use SGI's State Threads
  --with-tsrm-pthreads    Use POSIX threads (default)

Libtool:

  --enable-shared=PKGS    Build shared libraries default=yes
  --enable-static=PKGS    Build static libraries default=yes
  --enable-fast-install=PKGS
                          Optimize for fast installation default=yes
  --with-gnu-ld           Assume the C compiler uses GNU ld default=no
  --disable-libtool-lock  Avoid locking (might break parallel builds)
  --with-pic              Try to use only PIC/non-PIC objects default=use both
  --with-tags=TAGS        Include additional configurations automatic


Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  YACC        The `Yet Another Compiler Compiler' implementation to use.
              Defaults to the first program found out of: `bison -y', `byacc',
              `yacc'.
  YFLAGS      The list of arguments that will be passed by default to $YACC.
              This script will default YFLAGS to the empty string to avoid a
              default value of `-d' given by some make applications.
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

```
**phpmyadmin安装**
为了支持phpmyadmin php需要开启很多扩展
其中 --with-...后参数为安装路径 或 配置文件路径
```
sudo ./configure --prefix=/usr/local/php7  \
--enable-fpm  \
--with-config-file-path=/usr/local/php7/bin  \
--with-iconv=/usr/local/lib/libiconv  \
--enable-mysqlnd  \
--with-mysqli=/usr/bin/mysql_config  \
--with-pdo-mysql=/usr  \
--with-mysql-sock=/var/run/mysqld/mysqld.sock  \
--with-mcrypt  \
--with-mhash  \
--with-zlib  \
--enable-xml  \
--enable-bcmath  \
--enable-shmop  \
--enable-inline-optimization  \
--enable-mbregex  \
--enable-fpm  \
--enable-mbstring  \
--enable-ftp  \
--enable-gd-native-ttf  \
--with-openssl  \
--enable-pcntl  \
--enable-sockets  \
--with-xmlrpc  \
--enable-zip  \
--enable-soap  \
--without-pear  \
--with-gettext=/usr/lib/gettext  \
--enable-session  \
--with-curl  \
--with-jpeg-dir  \
--with-freetype-dir  \
--enable-opcache
```

```
$sudo apt-get install phpmyadmin
```
安装路径：/usr/share/phpmyadmin
配置所在路径：/etc/phpmyadmin

```
$cp /usr/share/phpmyadmin/config.sample.inc.php /etc/phpmyadmin/config.inc.php
```
修改 /etc/phpmyadmin/config.inc.php

```
 //$cfg['Servers'][$i]['connect_type'] = 'tcp';           
 $cfg['Servers'][$i]['socket'] = '/var/run/mysqld/mysqld.sock'; //找到自己的mysqld.sock路径
 //通常在安装mysql之后my.cnf中会有该路径
 $cfg['Servers'][$i]['connect_type'] = 'socket';
 //将原来的tcp改为socket
```
**登录http://localhost/phpmyadmin/**访问phpmyadmin


  
